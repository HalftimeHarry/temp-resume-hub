import{w as d}from"./NpgcrMAD.js";import{pb as r}from"./DNdyhkZ8.js";const o=d(null),u=d(!1),f=d(!0);function n(e){return{id:e.id,email:e.email||"",name:e.name,username:e.username||"",avatar:e.avatar,plan:e.plan||"free",created:e.created,updated:e.updated}}console.log("🔐 Auth Debug: Initializing auth state"),console.log("🔐 Auth Debug: PocketBase auth valid?",r.authStore.isValid),console.log("🔐 Auth Debug: PocketBase model:",r.authStore.model),r.authStore.isValid&&r.authStore.model?(console.log("🔐 Auth Debug: User is authenticated, setting current user"),o.set(n(r.authStore.model)),u.set(!0)):console.log("🔐 Auth Debug: No valid authentication found"),r.authStore.onChange(e=>{console.log("🔐 Auth Debug: Auth state changed:",e),e&&r.authStore.model?(console.log("🔐 Auth Debug: User logged in:",r.authStore.model),o.set(n(r.authStore.model)),u.set(!0)):(console.log("🔐 Auth Debug: User logged out"),o.set(null),u.set(!1))}),console.log("🔐 Auth Debug: Skipping automatic auth refresh to preserve auth state"),f.set(!1),setInterval(()=>{console.log("🔐 Auth Debug: Current state - isAuthenticated:",r.authStore.isValid,"User:",r.authStore.model?.email||"None")},5e3);const a={async register(e,s,t,g){try{const c={email:e,password:s,passwordConfirm:s,name:t,username:g,plan:"free"},i=await r.collection("users").create(c),l=await r.collection("users").authWithPassword(e,s);return o.set(n(l.record)),u.set(!0),{success:!0,user:l.record}}catch(c){if(console.error("Registration error:",c),c.response?.data){const i=c.response.data;if(i.data){const l=[];for(const[m,h]of Object.entries(i.data))h&&typeof h=="object"&&h.message&&l.push(`${m}: ${h.message}`);if(l.length>0)return{success:!1,error:l.join(", ")}}return{success:!1,error:i.message||"Registration failed"}}return{success:!1,error:c.message||"Registration failed"}}},async login(e,s){try{const t=await r.collection("users").authWithPassword(e,s);return o.set(n(t.record)),u.set(!0),{success:!0,user:t.record}}catch(t){return console.error("Login error:",t),{success:!1,error:t.message||"Login failed"}}},async logout(){try{return r.authStore.clear(),o.set(null),u.set(!1),{success:!0}}catch(e){return console.error("Logout error:",e),{success:!1,error:e.message||"Logout failed"}}},async requestPasswordReset(e){try{return await r.collection("users").requestPasswordReset(e),{success:!0}}catch(s){return console.error("Password reset error:",s),{success:!1,error:s.message||"Password reset request failed"}}},async confirmPasswordReset(e,s){try{return await r.collection("users").confirmPasswordReset(e,s,s),{success:!0}}catch(t){return console.error("Password reset confirmation error:",t),{success:!1,error:t.message||"Password reset confirmation failed"}}},async updateProfile(e){try{if(!r.authStore.model?.id)throw new Error("User not authenticated");const s=await r.collection("users").update(r.authStore.model.id,e);return o.set(n(s)),{success:!0,user:s}}catch(s){return console.error("Profile update error:",s),{success:!1,error:s.message||"Profile update failed"}}},async checkUsernameAvailability(e){try{return{available:(await r.collection("users").getList(1,1,{filter:`username = "${e}"`})).items.length===0}}catch(s){return console.error("Username check error:",s),{available:!1}}},async refreshAuth(){try{return r.authStore.isValid?(await r.collection("users").authRefresh(),{success:!0}):{success:!1,error:"No valid auth token"}}catch(e){return console.error("Auth refresh error:",e),e.message&&!e.message.includes("autocancelled")&&(r.authStore.clear(),o.set(null),u.set(!1)),{success:!1,error:e.message||"Auth refresh failed"}}}},A={subscribe:o.subscribe,isAuthenticated:u,isLoading:f,login:a.login,register:a.register,logout:a.logout,requestPasswordReset:a.requestPasswordReset,confirmPasswordReset:a.confirmPasswordReset,updateProfile:a.updateProfile,checkUsernameAvailability:a.checkUsernameAvailability,refreshAuth:a.refreshAuth};export{a as auth,A as authStore,o as currentUser,u as isAuthenticated,f as isLoading};
